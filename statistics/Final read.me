Statistical Analysis for T2D Susceptibility Project

Description

This repository contains an end-to-end pipeline for identifying and analysing Type 2 Diabetes (T2D)-associated SNPs, with a focus on South Asian populations. It covers data collection, filtering, and annotation, as well as downstream population genetics tests (e.g., FST, nSL), permutation tests, and normalisation of selection signals.

Overview

Goal: Identify T2D-associated genetic variants and detect positive selection signals in South Asian populations.

Data Sources:

T2D-associated SNPs from the T2D Knowledge Portal

1000 Genomes Project VCF files (autosomal) for reference populations.

Analyses:

Population-based VCF filtering

SNP selection & annotation

FST and nSL calculations

Permutation tests for assessing significance

Normalisation (Z-score) to enhance signal detection

Requirements

bcftools

htslib

vcftools

numpy

selscan (for nSL calculations)

Pipeline Steps

Below is the recommended chronological workflow for extracting, annotating, and statistically analysing T2D-associated SNPs.

Step 1: Collect T2D SNPs

Input:

CSV files with T2D-associated SNPs, e.g.:

T2DGGI2024T2DGWASassociations.csv

DIAMANTE2022T2DGWASassociations.csv

… (rename and organise as needed)

Action: Gather SNP info (rsID, chromosome, position, p-value, etc.) from T2D Knowledge Portal or any suitable GWAS dataset.

Step 2: Collect 1000 Genomes Data

Download 1000 Genomes Project autosomal VCF files (chromosomes 1-22) from:

https://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/

These files serve as the reference panels for your populations of interest (e.g., South Asian & European).

Step 3: Population-Based VCF Filtering

Script: Population filter.txt (example)

Purpose: Filter the 1000 Genome VCF to retain samples for specific populations (e.g., BEB, GIH, ITU, STU for South Asians and one European group).

Method:

Use bcftools and htslib to subset each chromosome’s VCF by population metadata (e.g., sampleID.txt).

Parallelise across chromosomes 1-22.

Compress and index results for downstream steps.

Step 4: Extract Chromosome Positions

Script: extract_chrom_positions.py

Purpose: Generate a list of unique chromosome-position pairs from the T2D SNP CSV files.

Method:

python3 extract_chrom_positions.py

This will produce, for example, t2d_chrom_position.txt, used to filter VCF files in the next step.

Step 5: Filter SNPs from Autosomal VCF Files

Purpose: Keep only T2D-associated SNPs in the VCF.

Method (example):

ls ALL.chr*.vcf.gz | parallel -j 4 'vcftools --gzvcf {} \
  --positions t2d_chrom_position.txt \
  --recode --out {/.}_filtered'

Result: ALL.chrX_filtered.recode.vcf files containing only T2D-associated SNPs for each chromosome.

Step 6: Merge Filtered VCF Files

Purpose: Concatenate all per-chromosome filtered VCF files into one.

Method:

bcftools concat ALL.chr*.vcf_filtered.recode.vcf \
  -O z -o all_chromosomes.vcf.gz

Output: all_chromosomes.vcf.gz (merged T2D-associated SNPs).

Step 7: Annotate VCF with rsIDs

Script: annotate_merged_vcf_withsnps.py

Purpose: Match each variant to its known rsID from the T2D SNP list (if missing).

Method:

python3 annotate_merged_vcf_withsnps.py

Output: snps_annotated_all_chromosomes.vcf.gz

Step 8: Calculate FST (Fixation Index)

Purpose: Compare allele frequency differences between South Asian and European populations.

Method: Using vcftools:

vcftools --gzvcf snps_annotated_all_chromosomes.vcf.gz \
  --weir-fst-pop Punjabi_sampleID.txt \
  --weir-fst-pop CEU_samples.txt \
  --out Fst_results_Punjabi_CEU

Repeat for other populations (GIH, ITU, BEB) vs. European references.

Step 9: Normalise Selection Signals

Purpose: Standardise selection statistics to enhance the visibility of outliers.

Method:

Apply Z-score transformation to nSL (and optionally FST) values.

Facilitate cross-population comparisons.

Improve clarity in visualisations (e.g., Manhattan plots).

Notes

Filtering SNPs by Genomic Positions may require a Liftover step if your GWAS data uses a different reference assembly (e.g., GRCh37 vs GRCh38).

Parallelisation is highly recommended for computationally heavy steps like selscan or bcftools tasks.

Update any scripts with your file paths, sample IDs, and naming conventions.
